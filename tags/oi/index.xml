<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Oi on Rainboy's Blog</title><link>https://hugo-dead-simple.netlify.com/tags/oi.html</link><description>Recent content in Oi on Rainboy's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 22 Oct 2025 06:30:21 +0000</lastBuildDate><atom:link href="https://hugo-dead-simple.netlify.com/tags/oi/index.xml" rel="self" type="application/rss+xml"/><item><title>bookmark</title><link>https://hugo-dead-simple.netlify.com/nvim-for-oi/bookmark.html</link><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate><guid>https://hugo-dead-simple.netlify.com/nvim-for-oi/bookmark.html</guid><description>&lt;p&gt;当然，为代码行添加标记（通常称为“书签”或“Bookmarks”）以便快速导航是一个非常常见的需求。Neovim 不仅有强大的内置标记功能，还有许多优秀的插件可以极大地增强这一体验。&lt;/p&gt;
&lt;h3 id="1-neovim-的内置标记-built-in-marks"&gt;1 Neovim 的内置标记 (Built-in Marks)&lt;/h3&gt;
&lt;p&gt;首先，你需要了解 Neovim 自带的、无需任何插件的标记功能。它非常强大和快速。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件内标记 (Lowercase Marks):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m{a-z}&lt;/code&gt;: 在当前光标行创建一个名为 &lt;code&gt;{char}&lt;/code&gt; 的标记。例如，&lt;code&gt;ma&lt;/code&gt; 会在当前行创建一个名为 &amp;lsquo;a&amp;rsquo; 的标记。这些标记只在当前文件中有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;`a&lt;/code&gt; 或 &lt;code&gt;'a&lt;/code&gt;: 跳转到标记 &amp;lsquo;a&amp;rsquo;。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;`a&lt;/code&gt; (反引号) 会跳转到标记所在行的&lt;strong&gt;确切光标位置&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'a&lt;/code&gt; (单引号) 会跳转到标记所在行的&lt;strong&gt;行首&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全局标记 (Uppercase Marks):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m{A-Z}&lt;/code&gt;: 创建一个全局标记。例如，&lt;code&gt;mA&lt;/code&gt;。这些标记在多个文件之间都有效（只要 Neovim 会话还在），并且会记录文件路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;`A&lt;/code&gt; 或 &lt;code&gt;'A&lt;/code&gt;: 从任何文件跳转到标记 &amp;lsquo;A&amp;rsquo; 所在的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;查看所有标记:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入命令 &lt;code&gt;:marks&lt;/code&gt; 可以查看所有已设置的标记。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优点:&lt;/strong&gt; 内置，速度极快，无需配置。
&lt;strong&gt;缺点:&lt;/strong&gt; 标记是&lt;strong&gt;不可见&lt;/strong&gt;的，你必须记住你把哪个标记放在了哪里，或者通过 &lt;code&gt;:marks&lt;/code&gt; 命令查看。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="2-插件推荐"&gt;2 插件推荐&lt;/h3&gt;
&lt;p&gt;为了解决内置标记不可见的问题，社区开发了许多插件，它们通常会在带有标记的行旁边添加一个“符号”或“图标”，并提供更友好的交互方式。&lt;/p&gt;
&lt;h4 id="-首选推荐-marksnvim"&gt;👑 首选推荐: marks.nvim&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;链接:&lt;/strong&gt; &lt;a href="https://github.com/chentoast/marks.nvim" target="_blank" rel="noopener"&gt;chentoast/marks.nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个现代化的 Neovim 插件，专门用于&lt;strong&gt;增强内置的 marks 功能&lt;/strong&gt;。它会让你的内置标记变得可见，并添加了许多方便的功能，是目前最优雅的解决方案之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可视化:&lt;/strong&gt; 在行号列或符号列为你设置的标记添加图标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无缝集成:&lt;/strong&gt; 它操作的仍然是 Neovim 的原生 marks，所以你依然可以使用 &lt;code&gt;ma&lt;/code&gt; 和 &lt;code&gt;'a&lt;/code&gt; 等命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速导航:&lt;/strong&gt; 提供了在标记之间循环跳转的命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Telescope 集成:&lt;/strong&gt; 可以用 Telescope 模糊搜索并跳转到所有标记。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久化:&lt;/strong&gt; 可以跨会话保存标记。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;lazy.nvim&lt;/code&gt; 的安装配置示例:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>nvim-lsp-clangd</title><link>https://hugo-dead-simple.netlify.com/nvim-for-oi/clangd.html</link><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate><guid>https://hugo-dead-simple.netlify.com/nvim-for-oi/clangd.html</guid><description>&lt;p&gt;在 Neovim 中不使用 &lt;code&gt;nvim-lspconfig&lt;/code&gt; 插件来手动配置 &lt;code&gt;clangd&lt;/code&gt; 是一个很好的学习 Neovim 内置 LSP API 的方式。这能让你更深入地理解 LSP 客户端是如何工作的。&lt;/p&gt;
&lt;p&gt;下面是详细的步骤和一份完整的 Lua 配置示例。&lt;/p&gt;
&lt;h3 id="核心思路"&gt;核心思路&lt;/h3&gt;
&lt;p&gt;不使用 &lt;code&gt;nvim-lspconfig&lt;/code&gt; 的核心是直接调用 Neovim 的原生 LSP 函数 &lt;code&gt;vim.lsp.start()&lt;/code&gt;。这个函数负责启动一个 LSP 服务进程，并将其附加到当前的缓冲区。&lt;/p&gt;
&lt;p&gt;主要步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;确保 &lt;code&gt;clangd&lt;/code&gt; 已安装&lt;/strong&gt;：Neovim 不会帮你安装 LSP 服务器，你需要自己通过系统包管理器安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义 &lt;code&gt;on_attach&lt;/code&gt; 函数&lt;/strong&gt;：这个函数在 LSP 成功附加到一个缓冲区后执行。我们在这里设置快捷键、高亮等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义 LSP 服务器配置&lt;/strong&gt;：创建一个配置表，告诉 Neovim 如何启动 &lt;code&gt;clangd&lt;/code&gt;（命令、根目录、文件类型等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;autocmd&lt;/code&gt; 触发 LSP&lt;/strong&gt;：创建一个自动命令，在打开 C/C++ 文件时，调用 &lt;code&gt;vim.lsp.start()&lt;/code&gt; 来启动 &lt;code&gt;clangd&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id="步骤-1-安装-clangd"&gt;步骤 1: 安装 clangd&lt;/h3&gt;
&lt;p&gt;首先，确保你的系统上已经安装了 &lt;code&gt;clangd&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;macOS (Homebrew):&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;brew install llvm
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;2&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Homebrew 安装的 llvm 可能需要手动链接，或者你可以在配置中指定完整路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu/Debian:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>outline</title><link>https://hugo-dead-simple.netlify.com/nvim-for-oi/outline.html</link><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate><guid>https://hugo-dead-simple.netlify.com/nvim-for-oi/outline.html</guid><description>&lt;p&gt;好的，你正在寻找的这类插件通常被称为“符号大纲” (Symbol Outline) 或“符号树” (Symbol Tree)。它们利用 Neovim 的 LSP (Language Server Protocol) 功能来获取代码的结构信息。&lt;/p&gt;
&lt;p&gt;对于 C++，你需要先确保你的 Neovim 已经配置好了 LSP，并且安装了 C++ 的语言服务器，最常用的是 &lt;code&gt;clangd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里有几个非常出色的插件可以完美实现你想要的功能，它们都非常接近 VS Code 的大纲视图。&lt;/p&gt;
&lt;h3 id="-首选推荐-symbols-outlinenvim"&gt;👑 首选推荐: symbols-outline.nvim&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;链接:&lt;/strong&gt; &lt;a href="https://github.com/simrat39/symbols-outline.nvim" target="_blank" rel="noopener"&gt;simrat39/symbols-outline.nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这可能是最直接、最像 VS Code 大纲的插件。它提供一个侧边栏，用树状结构清晰地展示当前文件中的所有符号（类、函数、变量、宏等），并且点击即可跳转。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非常直观的树状视图。&lt;/li&gt;
&lt;li&gt;自动随代码修改而更新。&lt;/li&gt;
&lt;li&gt;支持丰富的图标 (需要 &lt;code&gt;nvim-web-devicons&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;高度可定制，可以调整位置、宽度等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;lazy.nvim&lt;/code&gt; 的安装配置示例:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;2&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="s2"&gt;&amp;#34;simrat39/symbols-outline.nvim&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;3&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;4&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;leader&amp;gt;o&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;cmd&amp;gt;SymbolsOutline&amp;lt;cr&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Toggle Outline&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;5&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;6&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;7&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;symbols-outline&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;8&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;上面的配置添加了一个快捷键 &lt;code&gt;&amp;lt;leader&amp;gt;o&lt;/code&gt; 来打开或关闭大纲侧边栏。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="-强大备选-aerialnvim"&gt;🚀 强大备选: aerial.nvim&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;链接:&lt;/strong&gt; &lt;a href="https://github.com/stevearc/aerial.nvim" target="_blank" rel="noopener"&gt;stevearc/aerial.nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Aerial 是另一个功能极其强大的大纲插件。它不仅能显示符号，还能与 &lt;code&gt;nvim-navic&lt;/code&gt; (一个在顶部显示当前代码上下文的插件) 等工具集成，提供更丰富的导航体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持多种后端（LSP, Treesitter），信息更全面。&lt;/li&gt;
&lt;li&gt;UI 高度可定制，可以作为侧边栏或浮动窗口。&lt;/li&gt;
&lt;li&gt;可以显示代码的层级结构，非常适合大型项目。&lt;/li&gt;
&lt;li&gt;过滤和排序功能强大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;lazy.nvim&lt;/code&gt; 的安装配置示例:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>which-key</title><link>https://hugo-dead-simple.netlify.com/nvim-for-oi/which-key.html</link><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate><guid>https://hugo-dead-simple.netlify.com/nvim-for-oi/which-key.html</guid><description>&lt;h2 id="1-使用-which-key-最佳实践"&gt;1. 使用 which-key 最佳实践&lt;/h2&gt;
&lt;p&gt;当然，使用 &lt;code&gt;which-key.nvim&lt;/code&gt; 的目标不仅仅是“显示按键”，更是为了构建一个&lt;strong&gt;可发现、有逻辑、易于记忆&lt;/strong&gt;的键位系统。以下是一些被广泛认可的最佳实践：&lt;/p&gt;
&lt;h3 id="11-合理组织你的按键-organize-your-keys-logically"&gt;1.1. 合理组织你的按键 (Organize Your Keys Logically)&lt;/h3&gt;
&lt;p&gt;这是最核心的一点。不要随意放置键位，要用分组和助记符来构建你的配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用助记符 (Mnemonics):&lt;/strong&gt; 键位的首字母应该和它执行的动作相关联。这使得记忆成本大大降低。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;f&lt;/code&gt; -&amp;gt; &lt;strong&gt;F&lt;/strong&gt;ind (查找)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;g&lt;/code&gt; -&amp;gt; &lt;strong&gt;G&lt;/strong&gt;it (Git 相关)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;b&lt;/code&gt; -&amp;gt; &lt;strong&gt;B&lt;/strong&gt;uffers (缓冲区)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;p&lt;/code&gt; -&amp;gt; &lt;strong&gt;P&lt;/strong&gt;roject (项目)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;t&lt;/code&gt; -&amp;gt; &lt;strong&gt;T&lt;/strong&gt;oggle (切换) or &lt;strong&gt;T&lt;/strong&gt;erminal (终端)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建嵌套分组:&lt;/strong&gt; &lt;code&gt;which-key&lt;/code&gt; 最强大的功能就是分组。将相关的功能组织在一起。&lt;/p&gt;
&lt;p&gt;一个典型的 Git 分组示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 1&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 2&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;leader&amp;gt;g&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 3&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Git&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 4&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;-- 这个分组的图标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 5&lt;/span&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 6&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 7&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;leader&amp;gt;gs&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;cmd&amp;gt;Telescope git_status&amp;lt;cr&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Status&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 8&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;leader&amp;gt;gc&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;cmd&amp;gt;Telescope git_commits&amp;lt;cr&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Commits&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt; 9&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;leader&amp;gt;gb&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;cmd&amp;gt;Telescope git_branches&amp;lt;cr&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Branches&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;10&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;leader&amp;gt;gp&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;cmd&amp;gt;Git push&amp;lt;cr&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Push&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="ln"&gt;11&lt;/span&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;leader&amp;gt;gl&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;lt;cmd&amp;gt;Git pull&amp;lt;cr&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Pull&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当你按下 &lt;code&gt;&amp;lt;leader&amp;gt;g&lt;/code&gt; 后，&lt;code&gt;which-key&lt;/code&gt; 会弹出一个标题为 &amp;ldquo;Git&amp;rdquo; 的菜单，里面列出了 Status, Commits, Branches 等选项，非常清晰。&lt;/p&gt;</description></item></channel></rss>